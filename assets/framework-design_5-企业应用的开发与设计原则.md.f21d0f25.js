import{_ as t,c as a,o as e,Q as o}from"./chunks/framework.5f28ab71.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"framework-design/5-企业应用的开发与设计原则.md","lastUpdated":1709451841000}'),r={name:"framework-design/5-企业应用的开发与设计原则.md"},p=o('<h2 id="_5-企业应用的开发与设计原则" tabindex="-1">5-企业应用的开发与设计原则 <a class="header-anchor" href="#_5-企业应用的开发与设计原则" aria-label="Permalink to &quot;5-企业应用的开发与设计原则&quot;">​</a></h2><p>企业应用的设计原则，想要描述起来比较复杂，为什么呢？</p><p>因为对于 <strong>不同的企业类型</strong>（大厂、中小厂、人员外包、项目外包），<strong>不同的项目类型</strong>（前台、中台、后台）来说，对应的企业应用设计原则上可能会存在一些差异。</p><p>所以我们这里所做的描述，会抛弃一些细微的差异，仅抓住核心的重点来进行阐述。</p><p>无论什么类型的企业，也无论它们在开发什么类型的项目，那么最关注的点无非就是两个：</p><ol><li>项目成本</li><li>开发体验</li></ol><h3 id="项目成本" tabindex="-1">项目成本 <a class="header-anchor" href="#项目成本" aria-label="Permalink to &quot;项目成本&quot;">​</a></h3><p>项目成本非常好理解，它决定了一个公司完成“这件事”所付出的代价，从而直接决定了这个项目是否是可以盈利的（大厂的烧钱项目例外）。</p><p>那么既然项目成本如此重要，大家可以思考一下，决定项目成本的又是什么？</p><p>没错！就是你的 <strong>开发周期</strong>。</p><p>开发周期越长，所付出的人员成本就会越高，从而导致项目成本变得越高。</p><p>通过我们前面的分析可知，声明式的开发范式在 <strong>可维护性</strong> 上，是 <strong>大于</strong> 命令式的。</p><p>而可维护性从一定程度上就决定了，它会使项目的：<strong>开发周期变短、升级变得更容易</strong> 从而大量节约开发成本。</p><p>所以这也是为什么 <code>Vue</code> 会变得越来越受欢迎的原因。</p><h3 id="开发体验" tabindex="-1">开发体验 <a class="header-anchor" href="#开发体验" aria-label="Permalink to &quot;开发体验&quot;">​</a></h3><p>决定开发者开发体验的核心要素，主要是在开发时和阅读时的难度，这个被叫做：<strong>心智负担</strong>。</p><p>心智负担可以作为衡量开发难易度的一个标准，心智负担高则证明开发的难度较高，心智负担低则表示开发的难度较低，开发更加舒服。</p><p>那么根据我们之前所说，声明式的开发难度明显低于命令式的开发难度。</p><p>所以对于开发体验而言，声明式的开发体验更好，也就是 <strong>心智负担更低</strong>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在企业级项目开发中，<strong>声明式明显优于命令式</strong> 。</p><p>但是看到这里某些同学可能会说：</p><p>“你说的是不是太片面了？命令式一无是处吗？”</p><p>“命令式在性能上不是优于声明式吗？项目开发不考虑性能吗？”</p><p>当然不是！</p>',25),n=[p];function s(_,i,l,d,c,h){return e(),a("div",null,n)}const u=t(r,[["render",s]]);export{m as __pageData,u as default};
