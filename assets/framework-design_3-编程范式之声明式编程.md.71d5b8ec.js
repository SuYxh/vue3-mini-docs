import{_ as s,c as n,o as a,Q as p}from"./chunks/framework.5f28ab71.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"framework-design/3-编程范式之声明式编程.md","lastUpdated":1709451841000}'),l={name:"framework-design/3-编程范式之声明式编程.md"},o=p(`<h2 id="编程范式之声明式编程" tabindex="-1">编程范式之声明式编程 <a class="header-anchor" href="#编程范式之声明式编程" aria-label="Permalink to &quot;编程范式之声明式编程&quot;">​</a></h2><p>当了解完命令式之后，那么接下来我们就来看 <strong>声明式</strong> 编程。</p><p>针对于声明式而言，大家其实都是非常熟悉的了。</p><p>比如以下代码，就是一个典型的 <strong>声明式</strong> ：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于这个代码，大家是不是感觉有些熟悉？</p><p>没错，这就是 <code>Vue</code> 中非常常见的双大括号语法。所以当我们在写 <code>Vue</code> <strong>模板语法</strong> 的时候，其实一直写的就是 <strong>声明式</strong> 编程。</p><p>那么声明式编程具体指的是什么意思呢？</p><p>还是以刚才的例子为例：</p><blockquote><p>张三的妈妈让张三去买酱油。</p><p>那么张三怎么做的呢？</p><ol><li>张三拿起钱</li><li>打开门</li><li>下了楼</li><li>到商店</li><li>拿钱买酱油</li><li>回到家</li></ol></blockquote><p>在这个例子中，我们说：张三所做的事情就是命令式。那么张三妈妈所做的事情就是 <strong>声明式</strong>。</p><p>在这样一个事情中，张三妈妈只是发布了一个声明，她并不关心张三如何去买的酱油，只关心最后的结果。</p><p>所以说，所谓声明式指的是：<strong>不关注过程，只关注结果</strong> 的范式。</p><p>同样，如果我们通过代码来进行表示的话，以下例子：</p><blockquote><p>为指定的 div 的子元素 div 的子元素 p 标签，展示变量 msg</p></blockquote><p>将会得出如下代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ msg }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这样的代码中，我们完全不关心 <code>msg</code> 是怎么被渲染到 <code>p</code> 标签中的，我们所关心的只是：在 <code>p</code> 标签中，渲染指定文本而已。</p><p>最后做一个总结，什么叫做声明式呢？</p><p>声明式是：<strong>关注结果</strong> 的一种编程范式，他 <strong>并不关心</strong> 完成一个功能的 <strong>详细逻辑与步骤</strong>。（注意：这并不意味着声明式不需要过程！声明式只是把过程进行了隐藏而已！）</p>`,20),e=[o];function t(r,c,i,d,D,F){return a(),n("div",null,e)}const _=s(l,[["render",t]]);export{y as __pageData,_ as default};
