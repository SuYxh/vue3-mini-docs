import{_ as s,c as a,o as n,Q as p}from"./chunks/framework.5f28ab71.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/reactive/04-Map与WeakMap.md","lastUpdated":1709451841000}'),l={name:"reactivity/reactive/04-Map与WeakMap.md"},e=p(`<h2 id="_04-map-与-weakmap" tabindex="-1">04-Map 与 WeakMap <a class="header-anchor" href="#_04-map-与-weakmap" aria-label="Permalink to &quot;04-Map 与 WeakMap&quot;">​</a></h2><p>对比 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" target="_blank" rel="noreferrer">WeakMap</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noreferrer">Map</a> 的文档可知，他们两个具备一个核心共同点，那就是：<strong>都是 {key, value} 的结构对象</strong>。</p><p>但是对于 <code>WeakMap</code> 而言，他却存在两个不同的地方：</p><ol><li><code>key</code> 必须是对象</li><li><code>key</code> 是弱引用的</li></ol><p>其中第一个不同点比较好理解，但是第二个不同点是什么意思呢？</p><blockquote><p>概念</p><p>弱引用：不会影响垃圾回收机制。即：WeakMap 的 key <strong>不再存在任何引用时</strong>，会被直接回收。</p><p>强引用：会影响垃圾回收机制。存在强应用的对象永远 <strong>不会</strong> 被回收。</p></blockquote><p>我们来看下面两个例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// target 对象</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明 Map 对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 保存键值对</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 把 obj 置空</span></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在当前这段代码中，如果我们在浏览器控制台中，打印 <code>map</code> 那么打印结果如下：</p><p><img src="https://qn.huat.xyz/mac/202403022000384.jpg" alt="图片描述"></p><p>即：<strong>虽然 <code>obj</code> 已经不存在任何引用了，但是它并没有被回收，依然存在于 <code>Map</code> 实例中</strong>。这就证明 <code>Map</code> 是强应用的，哪怕 <code>obj</code> 手动为 <code>null</code>，但是它依然存在于 <code>Map</code> 实例中。</p><p>接下来同样的代码，我们来看 <code>WeakMap</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// target 对象</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 声明 Map 对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 保存键值对</span></span>
<span class="line"><span style="color:#A6ACCD;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 把 obj 置空</span></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在当前这段代码中，如果我们在浏览器控制台中，打印 <code>wm</code> 那么打印结果如下：</p><p><img src="https://qn.huat.xyz/mac/202403022000593.jpg" alt="图片描述"></p><p>此时 <code>WeakMap</code> 中不存在任何值，即：<strong><code>obj</code> 不存在其他引用时，<code>WeakMap</code> 不会阻止垃圾回收，基于 <code>obj</code> 的引用将会被清除</strong>。这就证明了 <code>WeakMap</code> 的 <strong>弱引用特性。</strong></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>那么由以上可知，对于 <code>WeakMap</code> 而言，它存在两个比较重要的特性：</p><ol><li><code>key</code> 必须是对象</li><li><code>key</code> 是弱引用的</li></ol>`,19),o=[e];function c(t,r,i,y,D,d){return n(),a("div",null,o)}const C=s(l,[["render",c]]);export{b as __pageData,C as default};
