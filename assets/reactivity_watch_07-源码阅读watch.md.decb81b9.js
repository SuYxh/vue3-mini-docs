import{_ as s,c as e,o as l,Q as o}from"./chunks/framework.5f28ab71.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/watch/07-源码阅读watch.md","lastUpdated":1709451841000}'),n={name:"reactivity/watch/07-源码阅读watch.md"},a=o(`<h2 id="_07-源码阅读-watch" tabindex="-1">07-源码阅读 watch <a class="header-anchor" href="#_07-源码阅读-watch" aria-label="Permalink to &quot;07-源码阅读 watch&quot;">​</a></h2><p>我们可以点击 <a href="https://cn.vuejs.org/guide/essentials/watchers.html" target="_blank" rel="noreferrer">这里</a> 来查看 <code>watch</code> 的官方文档。</p><p><code>watch</code> 的实现和 <code>computed</code> 有一些相似的地方，但是作用却与 <code>computed</code> 大有不同。<code>watch</code> 可以<strong>监听响应式数据的变化，从而触发指定的函数</strong></p><p>在 <code>vue3</code> 中使用 <code>watch</code> 的代码如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">watch 监听被触发</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">oldValue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上述代码中 <code>watch</code> 函数接收三个参数：</p><ol><li>监听的响应式对象</li><li>回调函数 <code>cb</code></li><li>配置对象：<code>options</code><ol><li><code>immediate</code>：<code>watch</code> 初始化完成后被立刻触发一次</li><li><code>deep</code>：深度监听</li></ol></li></ol><p>由此可见，<code>watch</code> 函数比较复杂，所以我们在跟踪 <code>watch</code> 的源码实现时，应当分步骤进行跟踪。</p><h3 id="基础的-watch-实例" tabindex="-1">基础的 <code>watch</code> 实例 <a class="header-anchor" href="#基础的-watch-实例" aria-label="Permalink to &quot;基础的 \`watch\` 实例&quot;">​</a></h3><p>修改 <code>packages/vue/examples/imooc/watch.html</code> 实例代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> watch </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">watch 监听被触发</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在以上代码中：</p><ol><li>首先通过 <code>reactive</code> 函数构建了响应性的实例</li><li>然后触发 <code>watch</code></li><li>最后触发 <code>proxy</code> 的 <code>setter</code></li></ol><p>摒弃掉之前熟悉的 <code>reactive</code>，我们从 <code>watch</code> 函数开始跟踪：</p><h3 id="watch-函数" tabindex="-1">watch 函数 <a class="header-anchor" href="#watch-函数" aria-label="Permalink to &quot;watch 函数&quot;">​</a></h3><ol><li><p>在 <code>packages/runtime-core/src/apiWatch.ts</code> 中找到 <code>watch</code> 函数，开始 <code>debugger</code>：</p></li><li><p>执行 <code>doWatch</code> 函数：</p><ol><li><p>进入 <code>doWatch</code> 函数</p></li><li><p>因为 <code>source</code> 为 <code>reactive</code> 类型数据，所以 <code>getter = () =&gt; source</code>，目前 <code>source</code> 为 <code>proxy</code> 实例，即：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">getter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>紧接着，指定 <code>deep = true</code>，即：<strong><code>source</code> 为 <code>reactive</code> 时，默认添加 <code>options.deep = true</code></strong></p></li><li><p>执行 <code>if (cb &amp;&amp; deep)</code>，条件满足：</p><ol><li>创建新的常量 <code>baseGetter = getter</code></li></ol></li><li><p>执行 <code>let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE</code>：</p><ol><li>其中 <code>isMultiSource</code> 表示是否有多个源，我们当前只有一个源，所以 <code>oldValue = INITIAL_WATCHER_VALUE</code></li><li><code>INITIAL_WATCHER_VALUE = {}</code></li></ol></li><li><p>执行 <code>const job: SchedulerJob = () =&gt; {...}</code>，我们知道 <code>Scheduler</code> 是一个调度器，<code>SchedulerJob</code> 其实就是一个调度器的处理函数，在之前我们接触了一下 <code>Scheduler</code> 调度器，但是并没有进行深入了解，那么这里将涉及到调度器的比较复杂的一些概念，所以后面我们想要实现 <code>watch</code>，还需要 <strong>深入的了解下调度器的概念</strong>，现在我们暂时先不需要管它。</p></li><li><p>接下来还是 <strong>调度器</strong> 概念，直接执行：<code>let scheduler: EffectScheduler = () =&gt; queuePreFlushCb(job)</code></p></li><li><p><code>6、7</code> 结合，将得到一个完整的调度器函数 <code>scheduler</code>，该函数被触发时，会返回 <strong><code>queuePreFlushCb(job)</code> 函数执行的结果</strong></p></li><li><p>代码继续执行得到一个 <code>ReactiveEffect</code> 的实例，<strong>注意：</strong> 该实例包含一个完善的调度器 <code>scheduler</code></p></li><li><p>代码继续执行，进入如下判断逻辑：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// cb 是 watch 的第二个参数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (cb) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// immediate 是 options 中的 immediate，表示：watch 是否立刻执行。</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 那么根据这个这个概念和一下代码，其实可以猜测：《 job() 触发，表示 watch 被立刻执行了一次 》</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  	</span><span style="color:#82AAFF;">job</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 不包含 immediate，则通过 effect.run() 获取旧值。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 根据我们前面创建 effect 的代码可知，run() 的执行其实是 getter 的执行。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 所以此处可以理解为 getter 被触发，则获取了 oldValue</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 我们的代码将执行 else</span></span>
<span class="line"><span style="color:#F07178;">  	</span><span style="color:#A6ACCD;">oldValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>最后 <code>return</code> 了一个回调函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scope</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">effects</span><span style="color:#89DDFF;">!,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">effect</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回调函数中的代码我们 <strong>无需深究</strong>，但是根据 <strong>代码语义</strong> <code>stop 停止</code> 、<code>remove 删除</code> ，可以猜测：<strong>该函数被触发 <code>watch</code> 将停止监听，同时删除依赖</strong></p></li></ol></li></ol><p>那么至此 <code>watch</code> 函数的逻辑执行完成。</p><p>由以上代码可知：</p><ol><li><code>watch</code> 函数的代码很长，但是逻辑还算清晰</li><li>调度器 <code>scheduler</code> 在 <code>watch</code> 中很关键</li><li><code>scheduler</code> 、<code>ReactiveEffect</code> 两者之间存在互相作用的关系，一旦 <code>effect</code> 触发了 <code>scheduler</code> 那么会导致 <code>queuePreFlushCb(job)</code> 执行</li><li>只要 <code>job()</code> 触发，那么就表示 <code>watch</code> 触发了一次</li></ol><h3 id="reactive-触发-setter" tabindex="-1">reactive 触发 setter <a class="header-anchor" href="#reactive-触发-setter" aria-label="Permalink to &quot;reactive 触发 setter&quot;">​</a></h3><p>等待两秒，<code>reactive</code> 实例将触发 <code>setter</code> 行为，<code>setter</code> 行为的触发会导致 <code>trigger</code> 函数的触发，所以我们可以直接在 <code>trigger</code> 中进行 <code>debugger</code></p><ol><li><p>在 <code>trigger</code> 中进行 <code>debugger</code></p></li><li><p>根据我们之前的经验可知，<code>trigger</code> 最终会触发到 <code>triggerEffect</code>，所以我们可以 <strong>省略中间</strong> 步骤，直接进入到 <code>triggerEffect</code> 中</p><ol><li><p>进入 <code>triggerEffect</code></p></li><li><p>此时 <code>effect</code> 为：</p><p><img src="https://qn.huat.xyz/mac/202403030936549.jpg" alt="图片描述"></p></li><li><p>关键其中两个比较重要的变量：</p><ol><li><code>fn</code>：值为<code>traverse(baseGetter())</code><ol><li>根据 <code>2-4-1</code> 可知 <code>baseGetter = getter</code></li><li>根据 <code>2-2</code> 可知：<code>getter = () =&gt; Proxy{name: &#39;xx&#39;}</code></li></ol></li></ol></li><li><p>所以 <code>fn = traverse(() =&gt; Proxy{name: &#39;xx&#39;})</code></p></li></ol></li><li><p><code>scheduler</code>：值为<code>() =&gt; queuePreFlushCb(job)</code> 1. 目前已知 <code>job()</code> 触发表示 <code>watch</code> 被回调一次</p><ol start="4"><li><p>因为 <code>scheduler</code> 存在，所以会直接执行 <code>scheduler</code>，即等同于<strong>直接执行 <code>queuePreFlushCb(job)</code></strong></p></li><li><p>所以接下来我们进入 <code>queuePreFlushCb</code>函数，看看<code>queuePreFlushCb</code>做了什么：</p><ol><li><p>进入 <code>queuePreFlushCb</code></p></li><li><p>触发<code>queueCb(cb, ..., pendingPreFlushCbs, ...)</code>函数，此时<code>cb = job</code>，即：<code>cb()</code> 触发一次，意味着 <code>watch</code> 触发一次</p><ol><li><p>进入 <code>queueCb</code> 函数</p></li><li><p>执行 <code>pendingQueue.push(cb)</code>，<code>pendingQueue</code> 从语义中看表示 <strong>队列</strong> ，为一个 <strong>数组</strong></p></li><li><p>执行<code>queueFlush()</code>函数：</p><ol><li><p>进入 <code>queueFlush()</code> 函数</p></li><li><p>执行 <code>isFlushPending = true</code></p></li><li><p>执行<code>currentFlushPromise = resolvedPromise.then(flushJobs)</code></p><ol><li>查看 <code>resolvedPromise</code> 可知：<code>const resolvedPromise = Promise.resolve()</code>，即：<strong><code>promise</code> 的成功状态</strong></li><li>我们知道 <code>promise</code> 主要存在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer">三种状态</a> ：</li><li><em>待定（pending）</em>：初始状态，既没有被兑现，也没有被拒绝。</li></ol></li><li><p><em>已兑现（fulfilled）</em>：意味着操作成功完成。 5. <em>已拒绝（rejected）</em>：意味着操作失败。</p></li><li><p>结合语义，其实可知：<code>isFlushPending = true</code> 应该是一个 <strong>标记</strong>，表示 <code>promise</code> 进入 <code>pending</code> 状态 7. 而同时我们知道 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noreferrer">Promise.resolve()</a> 是一个 <strong>已兑现</strong> 状态的状态切换函数，它是一个 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide" target="_blank" rel="noreferrer">异步的微任务</a></strong> ，即：<strong>它是一个优先于 <code>setTimeout(() =&gt; {}, 0)</code> 的异步任务</strong></p></li><li><p>而 <code>flushJobs</code> 是将是一个 <code>.then</code> 中的回调，即 <strong>异步执行函数</strong>，它会等到 <strong>同步任务执行完成之后</strong> 被触发</p></li><li><p>我们可以 <strong>给 <code>flushJobs</code> 函数内部增加一个断点</strong></p></li></ol></li></ol></li></ol></li></ol></li><li><p>至此整个 <code>trigger</code> 就执行完成</p></li></ol><p>由以上代码可知：</p><ol><li><p>整个 <code>trigger</code> 的执行核心是触发了 <code>scheduler</code> 调度器，从而触发 <code>queuePreFlushCb</code> 函数</p></li><li><p><code>queuePreFlushCb</code>函数主要做了以下几点事情：</p><ol><li>构建了任务队列 <code>pendingQueue</code></li><li>通过 <code>Promise.resolve().then</code> 把 <code>flushJobs</code> 函数扔到了微任务队列中</li></ol></li></ol><p>同时因为接下来 <strong>同步任务已经执行完成</strong>，所以 <strong>异步的微任务</strong> 马上就要开始执行，即接下来我们将会进入 <code>flushJobs</code> 中。</p><h3 id="flushjobs-函数" tabindex="-1">flushJobs 函数 <a class="header-anchor" href="#flushjobs-函数" aria-label="Permalink to &quot;flushJobs 函数&quot;">​</a></h3><ol><li><p>进入 <code>flushJobs</code> 函数</p></li><li><p>执行<code>flushPreFlushCbs(seen)</code> 函数，这个函数非常关键，我们来看一下：</p><ol><li><p>第一行代码执行 <code>if (pendingPreFlushCbs.length)</code>，这个 <code>pendingPreFlushCbs</code> 此时的值为：</p><p><img src="https://qn.huat.xyz/mac/202403030936721.jpg" alt="图片描述"></p></li><li><p>通过截图代码可知，<code>pendingPreFlushCbs</code>为一个数组，其中第一个元素就是 job 函数</p><ol><li>从 <code>reactive 触发 setter</code> 的 <code>2-5-2</code> 中可以看到传参</li></ol></li><li><p>执行 <code>activePreFlushCbs = [...new Set(pendingPreFlushCbs)]</code>，即：<strong>activePreFlushCbs = pendingPreFlushCbs</strong></p></li><li><p>执行 <code>for</code> 循环，<strong>执行 <code>activePreFlushCbs[preFlushIndex]()</code></strong>，即从 <code>activePreFlushCbs</code> 这个数组中，取出一个函数，并执行。</p><ol><li>根据 <code>2</code>、<code>3</code> 步可知，此时取出并且执行的函数即为 ：<strong>job</strong> 函数！</li></ol></li></ol></li></ol><p>那么到这里，<strong><code>job</code> 函数被成功执行</strong>，我们知道 <code>job</code> 执行意味着 <code>watch</code> 执行，即当前 <code>watch</code> 的回调 <strong>即将被执行</strong></p><p>由以上代码可知：</p><ol><li><code>flushJobs</code> 的主要作用就是触发 <code>job</code>，即：触发 <code>watch</code></li></ol><h3 id="job-函数" tabindex="-1">job 函数 <a class="header-anchor" href="#job-函数" aria-label="Permalink to &quot;job 函数&quot;">​</a></h3><ol><li><p>进入 <code>job</code> 的执行函数</p></li><li><p>执行 <code>const newValue = effect.run()</code>，此时 <code>effect</code> 为 ：</p><p><img src="https://qn.huat.xyz/mac/202403030936165.jpg" alt="图片描述"></p><ol><li><p>我们知道执行 <code>run</code>，本质上是执行 <code>fn</code></p></li><li><p>而 <code>traverse(baseGetter())</code> 即为 <code>traverse(() =&gt; Proxy{ name: &#39;xx&#39; })</code></p></li><li><p>结合代码获取到的是 <code>newValue</code>，所以我们可以大胆猜测，测试 <code>fn</code> 的结果等同于：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>接下来执行：<code>callWithAsyncErrorHandling(cb ......)</code></p><ol><li><p>进入 <code>callWithAsyncErrorHandling</code>函数：</p></li><li><p>函数接收的第一个参数 <code>fn</code> 的值为 <code>watch 的第一个参数 db</code>：</p><p><img src="https://qn.huat.xyz/mac/202403030936317.jpg" alt="图片描述"></p></li><li><p>接下来执行 <code>callWithErrorHandling(fn ......)</code></p><ol><li><p>进入 <code>callWithErrorHandling</code></p></li><li><p>这里的代码就比较简单了，其实就是触发了 <code>fn(...args)</code>，即：<strong>watch 的回调被触发</strong>，此时 <code>args</code> 的值为：</p><p><img src="https://qn.huat.xyz/mac/202403030936497.jpg" alt="图片描述"></p></li><li><p>但是比较有意思的是，这里执行了一次 <code>try ... catch</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (err) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">handleError</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>TODO…</p></li></ol></li></ol></li></ol></li></ol><p>截止到此时 <code>watch</code> 的回调终于 <strong>被触发了</strong>。</p><p>由以上代码可知：</p><ol><li><code>job</code>函数的主要作用其实就是有两个： <ol><li>拿到 <code>newValue</code> 和 <code>oldValue</code></li><li>触发 <code>fn</code> 函数执行</li></ol></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>到目前为止，整个 <code>watch</code> 的逻辑就已经全部理完了。整体氛围了四大块：</p><ol><li><code>watch</code> 函数本身</li><li><code>reactive</code> 的 <code>setter</code></li><li><code>flushJobs</code></li><li><code>job</code></li></ol><p>整个 <code>watch</code> 还是比较复杂的，主要是因为 <code>vue</code> 在内部进行了很多的 <strong>兼容性处理</strong>，使代码的复杂度上升了好几个台阶，我们自己去实现的时候 <strong>会简单很多</strong> 的。</p>`,39),p=[a];function c(t,r,i,d,F,y){return l(),e("div",null,p)}const b=s(n,[["render",c]]);export{u as __pageData,b as default};
