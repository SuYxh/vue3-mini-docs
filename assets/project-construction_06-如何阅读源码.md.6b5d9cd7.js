import{_ as e,c as a,o,Q as s}from"./chunks/framework.5f28ab71.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"project-construction/06-如何阅读源码.md","lastUpdated":1709451841000}'),n={name:"project-construction/06-如何阅读源码.md"},t=s(`<h2 id="_06-如何阅读源码" tabindex="-1">06-如何阅读源码 <a class="header-anchor" href="#_06-如何阅读源码" aria-label="Permalink to &quot;06-如何阅读源码&quot;">​</a></h2><p>目前已经知道了如何对 <code>vue</code> 的源代码进行 <code>debugger</code> ，但是如果想要学习或者了解 <code>vue</code> 的代码执行，那么光靠 <code>debugger</code> 是不够的，除此之外我们还需要掌握另外一个能力，那么 <strong>如何阅读源代码</strong></p><h3 id="阅读源代码的误区" tabindex="-1">阅读源代码的误区 <a class="header-anchor" href="#阅读源代码的误区" aria-label="Permalink to &quot;阅读源代码的误区&quot;">​</a></h3><p>很多同学在去阅读源代码的时候，都会面临一个 <strong>误区</strong>，那就是：<strong>我需要把源代码中每一行代码都读明白</strong>。</p><p>这是一个非常不对的行为，很容易让我们 <strong>事倍功半</strong></p><p>所以在这里我们需要先给大家明确一点：<strong>阅读源码绝对不是要读明白其中每一行代码的意思，而是在众多的业务代码中寻找到主线，跟随这个主线来进行阅读</strong></p><h3 id="阅读源码的正确姿势" tabindex="-1">阅读源码的正确姿势 <a class="header-anchor" href="#阅读源码的正确姿势" aria-label="Permalink to &quot;阅读源码的正确姿势&quot;">​</a></h3><p>想要快速、轻松的阅读源码，正确的姿势非常重要，主要有两点：</p><ol><li>摒弃边缘情况</li><li>跟随一条主线</li></ol><h4 id="摒弃边缘情况" tabindex="-1">摒弃边缘情况 <a class="header-anchor" href="#摒弃边缘情况" aria-label="Permalink to &quot;摒弃边缘情况&quot;">​</a></h4><p>在大型项目的源码中，都会充斥着非常多的业务代码，这些业务代码是用来处理很多 <strong>边缘情况</strong> 的，如果我们过分深究这些业务代码则会让我们陷入到一个 <strong>代码泥潭</strong> 中，在繁琐的业务中找不到方向。</p><p>所以，我们在阅读源码之前，必须要明确好一点，那就是：<strong>仅阅读核心逻辑</strong></p><h4 id="跟随一条主线" tabindex="-1">跟随一条主线 <a class="header-anchor" href="#跟随一条主线" aria-label="Permalink to &quot;跟随一条主线&quot;">​</a></h4><p>对于像 <code>vue</code> 这种量级的项目来说，哪怕我们只去阅读它的核心代码，你也会发现也是非常困难的。我们之前说过，<code>vue</code> 的核心大致可以分为三块：</p><ol><li>响应性</li><li>运行时</li><li>编译器</li></ol><p>每一大块的内部又分为了很多的业务分支。所以哪怕仅阅读核心代码已然是一个浩大的工作量。</p><p>所以说我们还需要另外一个方式，那就是：<strong>跟随一条主线</strong></p><blockquote><p>举个例子：我们以前面的 <code>packages/vue/examples/imooc/reactive.html</code> 为例</p></blockquote><p>在该代码中，我们通过 <code>reactive</code> 声明了一个响应式数据：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 声明响应式数据 obj</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>那么我们就可以以改代码为主线，来去查看 <code>reactive</code> 方法的主线逻辑：</p><ol><li>首先在 <code>reactive</code> 方法中进行了一个判断逻辑，判断 <code>target</code> 是否为只读的，如果是只读的就直接返回 <code>target</code>，意思是：传的是啥返回啥。</li><li>如果不是只读的，则触发 <code>createReactiveObject</code> 方法 ：</li></ol><p><img src="https://qn.huat.xyz/mac/202403021825279.jpg" alt="图片描述"></p><ol start="3"><li>在 <code>createReactiveObject</code> 方法中，又进行了一堆判断，最后返回了 <code>proxy</code> 实例对象，所以我们得到的 <code>obj</code> 应该就是一个 <code>proxy</code> 实例</li></ol><p><img src="https://qn.huat.xyz/mac/202403021825321.jpg" alt="图片描述"></p><ol start="4"><li>打印 <code>obj</code> 你会发现确实如此</li></ol><p>这样的一个简单的例子，就是告诉大家应该如何来通过 <strong><code>debugger</code> 配合 <code>正确姿势</code></strong> 来快速的阅读源代码。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>当然，我们这里只是通过一个简单的方式来进行了举例，在大家实际阅读的过程之中，肯定还是会遇到很多的困难的，我们要一个个的去解决！</p>`,29),l=[t];function c(r,p,i,d,h,u){return o(),a("div",null,l)}const b=e(n,[["render",c]]);export{_ as __pageData,b as default};
