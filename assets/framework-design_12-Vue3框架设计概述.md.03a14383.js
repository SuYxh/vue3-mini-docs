import{_ as s,c as n,o as a,Q as e}from"./chunks/framework.5f28ab71.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"framework-design/12-Vue3框架设计概述.md","lastUpdated":1709451841000}'),l={name:"framework-design/12-Vue3框架设计概述.md"},o=e(`<h2 id="_12-vue-3-框架设计概述" tabindex="-1">12-Vue 3 框架设计概述 <a class="header-anchor" href="#_12-vue-3-框架设计概述" aria-label="Permalink to &quot;12-Vue 3 框架设计概述&quot;">​</a></h2><p>根据前面的学习我们已经知道了：</p><ol><li>什么是声明式</li><li>什么是命令式</li><li>什么是运行时</li><li>什么是编译时</li><li>什么是运行时+编译时</li><li>同时也知道了 框架的设计过程本身是一个不断取舍的过程</li></ol><p>那么了解了这些内容之后，下来 <code>vue3</code> 的一个基本框架设计：</p><p>对于 <code>vue3</code> 而言，核心大致可以分为三大模块：</p><ol><li>响应性：<code>reactivity</code></li><li>运行时：<code>runtime</code></li><li>编译器：<code>compiler</code></li></ol><p>我们以以下基本结构来描述一下三者之间的基本关系：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ proxyTarget.name }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reactive</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">proxyTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">proxyTarget</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在以上代码中：</p><p>1、首先，我们通过<code>reactive</code>方法，声明了一个响应式数据。</p><p>该方法是 <code>reactivity</code> 模块对外暴露的一个方法。可以接收一个复杂数据类型，作为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a> 的 <strong>被代理对象（<code>target</code>）</strong>，返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a> 类型的 <strong>代理对象（<code>proxyTarget</code>）</strong>。当 <code>proxyTarget</code> 触发 <code>setter</code> 或 <code>getter</code> 行为时，会产生对应的副作用</p><p>2、然后，我们在 <code>tempalte</code> 标签中，写入了一个 <code>div</code>。我们知道这里所写入的 <code>html</code> 并不是真实的 <code>html</code>，我们可以把它叫做 <strong>模板</strong>，该模板的内容会被 <strong>编译器（ <code>compiler</code> ）</strong> 进行编译，从而生成一个 <code>render</code> 函数</p><p>3、最后，<code>vue</code> 会利用 <strong>运行时（<code>runtime</code>）</strong> 来执行 <code>render</code> 函数，从而渲染出真实 <code>dom</code></p><p>以上就是 <code>reactivity、runtime、compiler</code> 三者之间的运行关系。</p><p>当然除了这三者之外， <code>vue</code> 还提供了很多其他的模块，比如：<code>SSR</code> ，这里只是 <strong>概述了基本的运行逻辑</strong>。</p>`,15),p=[o];function r(t,c,i,F,y,D){return a(),n("div",null,p)}const m=s(l,[["render",r]]);export{u as __pageData,m as default};
