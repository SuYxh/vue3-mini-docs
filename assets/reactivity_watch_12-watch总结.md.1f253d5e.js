import{_ as t,c as a,o as e,Q as c}from"./chunks/framework.5f28ab71.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/watch/12-watch总结.md","lastUpdated":1709451841000}'),o={name:"reactivity/watch/12-watch总结.md"},r=c('<h2 id="_12-watch-总结" tabindex="-1">12-watch 总结 <a class="header-anchor" href="#_12-watch-总结" aria-label="Permalink to &quot;12-watch 总结&quot;">​</a></h2><p>那么现在我们已经完成了 <code>watch</code> 侦听器的实现。</p><p>对于 <code>watch</code> 而言本质上还是依赖于 <code>ReactiveEffect</code> 来进行的实现。</p><p>本质上依然是一个 <strong>依赖收集</strong>、<strong>触发依赖</strong> 的过程。只不过区别在于此时的依赖收集是被 <strong>“被动触发”</strong> 的。</p><p>除此之外，还有一个调度器的概念，对于调度器而言，它起到的的主要作用就是 <strong>控制执行顺序</strong>、<strong>控制执行规则</strong> ，但是大家也需要注意调度器本身只是一个函数，想要完成调度功能，还需要其他的东西来配合才可以。</p>',5),s=[r];function _(n,d,h,i,p,l){return e(),a("div",null,s)}const w=t(o,[["render",_]]);export{f as __pageData,w as default};
