import{_ as e,c as o,o as t,Q as c}from"./chunks/framework.5f28ab71.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/watch/13-总结.md","lastUpdated":1709451841000}'),a={name:"reactivity/watch/13-总结.md"},r=c('<h2 id="_13-总结" tabindex="-1">13-总结 <a class="header-anchor" href="#_13-总结" aria-label="Permalink to &quot;13-总结&quot;">​</a></h2><p>那么到这里，咱们整个的 <strong>响应系统</strong> 就全部讲解完成了。整个响应系统我们分成了：</p><ol><li>reactive</li><li>ref</li><li>computed</li><li>watch</li></ol><p>四大块来进行分别的实现。</p><p>通过之前的学习可以知道，响应式的核心 <code>API</code> 为 <code>Proxy</code>。整个 <code>reactive</code> 都是基于此来进行实现。</p><p>但是 <code>Porxy</code> 只能代理 <strong>复杂数据类型</strong>，所以延伸除了 <code>get value</code> 和 <code>set value</code> 这样 <strong>以属性形式调用的方法</strong>， <code>ref</code> 和 <code>computed</code> 之所以需要 <code>.value</code> 就是因为这样的方法。</p>',6),d=[r];function _(s,i,n,l,p,h){return t(),o("div",null,d)}const f=e(a,[["render",_]]);export{m as __pageData,f as default};
