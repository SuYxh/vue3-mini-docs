import{_ as s,c as e,o as a,Q as o}from"./chunks/framework.5f28ab71.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/ref/02-源码阅读.md","lastUpdated":1709451841000}'),l={name:"reactivity/ref/02-源码阅读.md"},n=o(`<h2 id="_02-源码阅读" tabindex="-1">02-源码阅读 <a class="header-anchor" href="#_02-源码阅读" aria-label="Permalink to &quot;02-源码阅读&quot;">​</a></h2><p>和学习 <code>reactive</code> 的时候一样，我们首先先来看一下 <code>ref</code> 函数下，<code>vue 3</code> 源码的执行过程。</p><ol><li><p>创建测试实例 <code>packages/vue/examples/imooc/ref.html</code></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> effect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 调用 effect 方法</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>通过 <code>Live Server</code> 运行测试实例</p></li><li><p><code>ref</code> 的代码位于 <code>packages/reactivity/src/ref.ts</code> 之下，我们可以在这里打下断点</p></li></ol><h3 id="ref-函数" tabindex="-1">ref 函数 <a class="header-anchor" href="#ref-函数" aria-label="Permalink to &quot;ref 函数&quot;">​</a></h3><ol><li><code>ref</code> 函数中，直接触发 <code>createRef</code> 函数</li><li>在 <code>createRef</code> 中，进行了判断如果当前已经是一个 <code>ref</code> 类型数据则直接返回，否则 <strong>返回 <code>RefImpl</code> 类型的实例</strong></li><li>那么这个<code>RefImpl</code>是什么呢？ <ol><li><code>RefImpl</code> 是同样位于 <code>packages/reactivity/src/ref.ts</code> 之下的一个类</li><li>该类的构造函数中，执行了一个<code>toReactive</code>的方法，传入了<code>value</code>并把返回值赋值给了<code>this._value</code>，那么我们来看看<code>toReactive</code>的作用： <ol><li><code>toReactive</code>方法把数据分成了两种类型： <ol><li>复杂数据类型：调用了 <code>reactive</code> 函数，即把 <code>value</code> 变为响应性的。</li><li>简单数据类型：直接把 <code>value</code> 原样返回</li></ol></li></ol></li><li>该类提供了一个分别被<code>get</code>和<code>set</code>标记的函数<code>value</code><ol><li>当执行 <code>xxx.value</code> 时，会触发 <code>get</code> 标记</li><li>当执行 <code>xxx.value = xxx</code> 时，会触发 <code>set</code> 标记</li></ol></li></ol></li><li>至此 <code>ref</code> 函数执行完成。</li></ol><p>由以上逻辑可知：</p><ol><li>对于 <code>ref</code> 而言，主要生成了 <code>RefImpl</code> 的实例</li><li>在构造函数中对传入的数据进行了处理： <ol><li>复杂数据类型：转为响应性的 <code>proxy</code> 实例</li><li>简单数据类型：不去处理</li></ol></li><li><code>RefImpl</code> 分别提供了<code>get value</code>、<code>set value</code> 以此来完成对 <code>getter</code> 和 <code>setter</code> 的监听，注意这里并没有使用 <code>proxy</code></li></ol><h3 id="effect-函数" tabindex="-1">effect 函数 <a class="header-anchor" href="#effect-函数" aria-label="Permalink to &quot;effect 函数&quot;">​</a></h3><p>当 <code>ref</code> 函数执行完成之后，测试实例开始执行 <code>effect</code> 函数。</p><p><code>effect</code> 函数我们之前跟踪过它的执行流程，我们知道整个 <code>effect</code> 主要做了 3 件事情：</p><ol><li>生成 <code>ReactiveEffect</code> 实例</li><li><strong>触发 <code>fn</code> 方法，从而激活 <code>getter</code></strong></li><li>建立了<code>targetMap</code>和<code>activeEffect</code>之间的联系 <ol><li><code>dep.add(activeEffect)</code></li><li><code>activeEffect.deps.push(dep)</code></li></ol></li></ol><p>通过以上可知，<code>effect</code> 中会触发 <code>fn</code> 函数，也就是说会执行 <code>obj.value.name</code> ，那么根据 <code>get value</code> 机制，此时会触发 <code>RefImpl</code> 的 <code>get value</code> 方法。</p><p>所以我们可以在 <code>117</code> 行增加断点，等代码进入 <code>get value</code></p><h3 id="get-value" tabindex="-1">get value() <a class="header-anchor" href="#get-value" aria-label="Permalink to &quot;get value()&quot;">​</a></h3><ol><li><p>在 <code>get value</code> 中会触发 <code>trackRefValue</code> 方法</p><ol><li><p>触发 <code>trackEffects</code> 函数，并且在此时为 <code>ref</code> 新增了一个 <code>dep</code> 属性：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">trackEffects</span><span style="color:#A6ACCD;">(ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dep </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (ref</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dep </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createDep</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>而 <code>trackEffects</code> 其实我们是有过了解的，我们知道 <code>trackEffects</code> 主要的作用就是：<strong>收集所有的依赖</strong></p></li></ol></li><li><p>至此 <code>get value</code> 执行完成</p></li></ol><p>由以上逻辑可知：</p><p>整个 <code>get value</code> 的处理逻辑还是比较简单的，主要还是通过之前的 <code>trackEffects</code> 属性来收集依赖。</p><h3 id="再次触发-get-value" tabindex="-1">再次触发 get value() <a class="header-anchor" href="#再次触发-get-value" aria-label="Permalink to &quot;再次触发 get value()&quot;">​</a></h3><p>最后就是在两秒之后，修改数据源了：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是这里有一个很关键的问题，需要大家进行思考，那就是：<strong>此时会触发 <code>get value</code> 还是 <code>set value</code> ？</strong></p><p>我们知道以上代码可以被拆解为：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>那么通过以上代码我们清晰可知，其实触发的应该是 <code>get value</code> 函数。</p><p>在 <code>get value</code> 函数中：</p><ol><li>再次执行<code>trackRefValue</code>函数： <ol><li>但是此时 <code>activeEffect</code> 为 <code>undefined</code>，所以不会执行后续逻辑</li></ol></li><li>返回<code>this._value</code><ol><li>通过 <strong>构造函数</strong>，我们可知，此时的 <code>this._value</code> 是经过 <code>toReactive</code> 函数过滤之后的数据，在当前实例中为 <strong><code>proxy</code></strong> 实例。</li></ol></li><li><code>get value</code> 执行完成</li></ol><p>由以上逻辑可知：</p><ol><li><code>const value</code> 是 <code>proxy</code> 类型的实例，即：<strong>代理对象</strong>，被代理对象为 <code>{name: &#39;张三&#39;}</code></li><li>执行 <code>value.name = &#39;李四&#39;</code> ，本质上是触发了 <code>proxy</code> 的 <code>setter</code></li><li>根据 <code>reactive</code> 的执行逻辑可知，此时会触发 <code>trigger</code> 触发依赖。</li><li>至此，修改视图</li></ol><h3 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><p>由以上逻辑可知：</p><ol><li>对于 <code>ref</code> 函数，会返回 <code>RefImpl</code> 类型的实例</li><li>在该实例中，会根据传入的数据类型进行分开处理 <ol><li>复杂数据类型：转化为 <code>reactive</code> 返回的 <code>proxy</code> 实例</li><li>简单数据类型：不做处理</li></ol></li><li>无论我们执行 <code>obj.value.name</code> 还是 <code>obj.value.name = xxx</code> 本质上都是触发了 <code>get value</code></li><li>之所以会进行 <strong>响应性</strong> 是因为 <code>obj.value</code> 是一个 <code>reactive</code> 函数生成的 <code>proxy</code></li></ol>`,31),p=[n];function c(t,r,d,i,D,y){return a(),e("div",null,p)}const C=s(l,[["render",c]]);export{u as __pageData,C as default};
