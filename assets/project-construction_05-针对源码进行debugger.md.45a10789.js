import{_ as e,c,o,Q as d}from"./chunks/framework.5f28ab71.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"project-construction/05-针对源码进行debugger.md","lastUpdated":1709451841000}'),t={name:"project-construction/05-针对源码进行debugger.md"},r=d('<h2 id="_05-针对源码进行-debugger" tabindex="-1">05-针对源码进行 debugger <a class="header-anchor" href="#_05-针对源码进行-debugger" aria-label="Permalink to &quot;05-针对源码进行 debugger&quot;">​</a></h2><p>此时我们已经成功的开启了 <code>SourceMap</code> ，那么开启了 <code>sourceMap</code> 之后有什么改变呢？</p><p>此时我们在来看刚才启动的项目。</p><p>在刚才启动的项目中，按 <code>F12</code> 打开控制台，进入 <code>Sources</code> 模块，此时可以看到如下内容：</p><p><img src="https://qn.huat.xyz/mac/202403021813816.jpg" alt="图片描述"></p><p>其中左侧所展示的，就是当前使用到的 <code>vue</code> 源代码。</p><p>那么我们知道此时我们是使用了 <code>reactive</code> 方法声明的响应式数据，<code>reactive</code> 方法对应的代码位置在 <code>packages/reactivity/src/reactive.ts</code> 中第 <code>90</code> 行：</p><p><img src="https://qn.huat.xyz/mac/202403021813908.jpg" alt="图片描述"></p><p>那么此时我们就可以在这里打上一个断点，来跟踪整个 <code>reactive</code> 的代码执行逻辑。</p><p>刷新页面，可以看到，此时代码已经进入了 <code>debugger</code></p><p><img src="https://qn.huat.xyz/mac/202403021813378.jpg" alt="图片描述"></p><p>那么这样我们就已经成功的为 <code>vue</code> 的测试实例开启了 <code>debugger</code> 功能，后续我们的开发之中，就可以利用这样的方式，来跟踪并查看 <code>vue</code> 源码的执行逻辑。</p><p>想要对 <code>vue</code> 代码执行 <code>debugger</code> 那么共分为以下步骤：</p><ol><li>下载 <code>vue</code> 源代码（注意：<strong>直接下载 <code>ZIP</code> 文件会导致 <code>build</code> 出错</strong>）</li><li>为源代码开启 <code>sourcemap</code>，以方便后续进行 <code>debugger</code></li><li>在 <code>packages/vue/examples</code> 中，创建文件，导入 <code>../../dist/vue.global.js</code> ，书写测试实例</li><li>通过 <code>Live Server</code> 启动服务</li><li>在浏览器控制台的 <code>Sources</code> 中查看运行代码，并进行 <code>debugger</code></li></ol>',14),a=[r];function p(s,i,u,_,g,l){return o(),c("div",null,a)}const b=e(t,[["render",p]]);export{m as __pageData,b as default};
