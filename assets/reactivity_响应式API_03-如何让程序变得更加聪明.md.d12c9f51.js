import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.5f28ab71.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/响应式API/03-如何让程序变得更加聪明.md","lastUpdated":1709451841000}'),p={name:"reactivity/响应式API/03-如何让程序变得更加聪明.md"},e=l(`<h2 id="_03-如何让程序变得更加聪明" tabindex="-1">03-如何让程序变得更加聪明 <a class="header-anchor" href="#_03-如何让程序变得更加聪明" aria-label="Permalink to &quot;03-如何让程序变得更加聪明&quot;">​</a></h2><blockquote><p>为了让程序变得更加 “聪明” , 所以你开始想：”如果数据变化了，重新执行运算就好了“。</p></blockquote><p>那么怎么去做呢？你进行了一个这样的初步设想：</p><ol><li>创建一个函数 <code>effect</code>，在其内部封装 <strong>计算总价格的表达式</strong></li><li>在第一次打印总价格之前，执行 <code>effect</code> 方法</li><li>在第二次打印总价格之前，执行 <code>effect</code> 方法</li></ol><p>那么这样我们是不是就可以在第二次打印时，得到我们想要的 <code>50</code> 了呢？</p><p>所以据此，你得到了如下的代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 定义一个商品对象，包含价格和数量</span></span>
<span class="line"><span style="color:#A6ACCD;">  let product = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    price: </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    quantity: </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 总价格</span></span>
<span class="line"><span style="color:#A6ACCD;">  let total = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 计算总价格的匿名函数</span></span>
<span class="line"><span style="color:#A6ACCD;">  let effect = () =&gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    total </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">price </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">quantity;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 第一次打印</span></span>
<span class="line"><span style="color:#A6ACCD;">  effect();</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`总价格：$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">total</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\`); // 总价格：20</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 修改了商品的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">  product.quantity = 5;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 第二次打印</span></span>
<span class="line"><span style="color:#A6ACCD;">  effect();</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`总价格：$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">total</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\`); // 总价格：50</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在这样的代码中，我们成功的让第二次打印得到了我们期望的结果：<strong>数据变化了，运算也重新执行了。</strong></p><p>但是大家也可以发现，在我们当前的代码中存在一个明显的问题，那就是：**必须主动在数量发生变化之后，重新主动执行 <code>effect</code> **才可以得到我们想要的结果。那么这样未免太麻烦了。有什么好的办法吗？</p><p>肯定是有的</p>`,10),o=[e];function c(t,r,i,C,D,A){return a(),n("div",null,o)}const u=s(p,[["render",c]]);export{b as __pageData,u as default};
