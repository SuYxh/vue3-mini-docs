import{_ as s,c as n,o as a,Q as p}from"./chunks/framework.5f28ab71.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/响应式API/02-JS的程序性.md","lastUpdated":1709451841000}'),l={name:"reactivity/响应式API/02-JS的程序性.md"},e=p(`<h2 id="_02-js-的程序性" tabindex="-1">02-JS 的程序性 <a class="header-anchor" href="#_02-js-的程序性" aria-label="Permalink to &quot;02-JS 的程序性&quot;">​</a></h2><p>想要了解响应性，那么首先我们先了解什么叫做：<strong>JS 的程序性</strong></p><p>我们来看下面这段代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 定义一个商品对象，包含价格和数量</span></span>
<span class="line"><span style="color:#A6ACCD;">  let product = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    price: </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    quantity: </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 总价格</span></span>
<span class="line"><span style="color:#A6ACCD;">  let total = product.price * product.quantity;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 第一次打印</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`总价格：$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">total</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 修改了商品的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">  product.quantity = 5;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 第二次打印</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`总价格：$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">total</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\`);</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>大家可以想一下，在这段代码中，第一次打印的值是什么？第二次打印的值是什么？</p><p>这是一个非常简单的 <code>JS</code> 逻辑，两次打印的值应该都是一样的：<code>总价格：20</code></p><p>但是大家有没有想过一个问题？</p><p>那就是当我们去进行第二次打印的时候，还希望它还是 20 吗？**</p><blockquote><p>我们最终希望打印的是 <strong>总价格</strong>，那么当 <code>quantity</code> 由 2 变为 5 的时候，总价格不应该是 50 了吗？</p><p>我们打印出来的总价格，难道不应该是 50 吗？</p></blockquote><p>那么此时你有没有冒出来一个想法：<strong>商品数量发生变化了，如果总价格能够自己跟随变化，那就太好了！</strong></p><p>但是 <code>js</code> 本身具备 <strong>程序性</strong>，所谓程序性指的就是：<strong>一套固定的，不会发生变化的执行流程</strong> ，在这样的一个程序性之下，我们是 <strong>不可能</strong> 拿到想要的 <code>50</code> 的。</p><p>那么如果我们想要拿到这个 <code>50</code> 就必须要让你的程序变得更加的 “聪明”，也就是使其具备 <strong>响应性</strong>！</p>`,12),o=[e];function t(r,c,i,d,C,D){return a(),n("div",null,o)}const b=s(l,[["render",t]]);export{A as __pageData,b as default};
