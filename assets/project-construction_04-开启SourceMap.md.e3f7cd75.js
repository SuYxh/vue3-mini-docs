import{_ as s,c as a,o as e,Q as n}from"./chunks/framework.5f28ab71.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"project-construction/04-开启SourceMap.md","lastUpdated":1709451841000}'),o={name:"project-construction/04-开启SourceMap.md"},p=n(`<h2 id="_04-开启-sourcemap" tabindex="-1">04-开启 SourceMap <a class="header-anchor" href="#_04-开启-sourcemap" aria-label="Permalink to &quot;04-开启 SourceMap&quot;">​</a></h2><p>此时，我们已经成功的运行了一个测试实例代码，但是在这样的一个测试实例代码中，<code>Vue</code> 内部是如何执行的呢？</p><p>如果想要知道这个，那么我们需要对 <code>vue</code> 的代码进行 <code>debugger</code> 来跟踪 <code>vue</code> 代码的执行。</p><p>那么问题就来了，<strong>如何对 <code>Vue</code> 进行 <code>debugger</code> 操作呢？</strong></p><p>如果想要对 <code>Vue</code> 进行 <code>debugger</code> 操作，那么我们必须要开启 <code>vue</code> 的 <code>source-map</code> 功能。</p><h3 id="开启-vue-的-sourcemap" tabindex="-1">开启 <code>Vue</code> 的 SourceMap <a class="header-anchor" href="#开启-vue-的-sourcemap" aria-label="Permalink to &quot;开启 \`Vue\` 的 SourceMap&quot;">​</a></h3><p>那么如何开启 <code>Vue</code> 的 <code>source-map</code> 呢？</p><ol><li><p>打开 <code>package.json</code> 可以发现，当我们执行 <code>npm run build</code> 时，其实执行的是 <code>node scripts/build.js</code> 指令</p></li><li><p>这就意味着，它的配置文件读取的是 <code>scripts/build.js</code> 这个文件</p></li><li><p>那么在该文件中存在这样的一行代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">sourceMap </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">SOURCE_MAP:true</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>也就是说，这里的 <code>sourceMap</code> 变量，决定了 <code>SOURCE_MAP:true</code> 还是 ‘’</p></li><li><p>而这个值，最终会被设置到环境变量中，在 <code>rollup.config.js</code> 中，通过：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sourcemap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!!</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SOURCE_MAP</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>的形式，赋值给 <code>output.sourcemap</code></p></li><li><p>而 <code>output.sourcemap</code> 则决定了，最终的打包，是否会包含 <code>source-map</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sourceMap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sourcemap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>所以，根据以上代码，只要 <code>scripts/build.js</code> 中的 <code>sourceMap</code> 变量的值为 <code>true</code>，则最终会打包包含 <code>sourcemap</code> 的包。</p></li><li><p>那么 <code>sourceMap</code> 变量的值是如何确定的呢？</p></li><li><p>在 <code>scripts/build.js</code> 中，我们可以看到如下代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sourceMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sourcemap </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>而 <code>args</code> 的值为：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">minimist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>从代码可知，<code>args</code> 是 <code>minimist</code> 的导出对象。</p></li><li><p>所以我们需要看下 <a href="https://www.npmjs.com/package/minimist" target="_blank" rel="noreferrer">minimist</a> 这个依赖包是干什么呢？</p></li><li><p>根据官网的实例代码可知：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">argv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">require</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">minimist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">process.argv.slice(2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">console.log(argv</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">example/parse.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">beep</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">boop</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">a:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beep</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">boop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>我们可以在执行 <code>npx</code> 指令时，通过 <code>-a beep</code> 的形式为 <code>require(&#39;minimist&#39;)(process.argv.slice(2));</code> 导出的值增加属性</p></li><li><p>所以，根据以上代码，我们可以在 <code>package.json</code> 中修改 <code>build</code> 指令为：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">node scripts/build.js -s</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>其中的 <code>-s</code> 表示：我们将为 <code>scripts/build.js</code> 文件中的 <code>args</code> 新增一个属性 <code>s</code></p></li><li><p>而这个 <code>s</code> 将决定了 <code>sourceMap</code> 常量的值为 <code>true</code></p></li><li><p>此时，我们再执行 <code>npm run build</code> 可以发现，打包出的所有文件都将包含一个 <code>xxxx.map</code> 文件</p></li><li><p>这样我们就开启了源代码的 <code>source-map</code></p></li><li><p>有了 <code>source-map</code> 之后，接下来我们就可以对代码进行 <code>debugger</code> 了。</p></li></ol>`,8),l=[p];function c(r,t,i,d,D,u){return e(),a("div",null,l)}const F=s(o,[["render",c]]);export{y as __pageData,F as default};
