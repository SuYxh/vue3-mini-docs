import{_ as s,c as n,o as a,Q as e}from"./chunks/framework.5f28ab71.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"reactivity/响应式API/04-ObjectdefineProperty.md","lastUpdated":1709451841000}'),l={name:"reactivity/响应式API/04-ObjectdefineProperty.md"},p=e(`<h2 id="_04-object-defineproperty" tabindex="-1">04-Object.defineProperty <a class="header-anchor" href="#_04-object-defineproperty" aria-label="Permalink to &quot;04-Object.defineProperty&quot;">​</a></h2><p><code>vue2</code> 以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty</a> 作为响应性的核心 <code>API</code> ，该 <code>API</code> 可以监听：<strong>指定对象的指定属性的 <code>getter</code> 和 <code>setter</code></strong></p><p>那么接下来我们就可以借助该 <code>API</code>，让我们之前的程序进行 <strong>自动计算</strong>，该 <code>API</code> 接收三个参数：<strong>指定对象、指定属性、属性描述符对象</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 定义一个商品对象，包含价格和数量</span></span>
<span class="line"><span style="color:#A6ACCD;">  let quantity = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">  let product = </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    price: </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    quantity: quantity</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 总价格</span></span>
<span class="line"><span style="color:#A6ACCD;">  let total = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 计算总价格的匿名函数</span></span>
<span class="line"><span style="color:#A6ACCD;">  let effect = () =&gt; </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    total </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">price </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">quantity;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  // 第一次打印</span></span>
<span class="line"><span style="color:#A6ACCD;">  effect();</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`总价格：$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">total</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\`); // 总价格：20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  // 监听 product 的 quantity 的 setter</span></span>
<span class="line"><span style="color:#A6ACCD;">  Object.defineProperty(product, &#39;quantity&#39;, </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 监听 product.quantity = xx 的行为，在触发该行为时重新执行 effect</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(newVal) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 注意：这里不可以是 product.quantity = newVal，因为这样会重复触发 set 行为</span></span>
<span class="line"><span style="color:#A6ACCD;">      quantity </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newVal</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 重新触发 effect</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">effect</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 监听 product.quantity，在触发该行为时，以 quantity 变量的值作为 product.quantity 的属性值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(val) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      return quantity</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>那么此时我们就通过 <code>Object.defineProperty</code> 方法成功监听了 <code>quantity</code> 属性的 <code>getter</code> 和 <code>setter</code> 行为，现在当 <code>quantity</code> 发生变化时，<code>effect</code> 函数将重新计算，以此得到最新的 <code>total</code>。</p>`,5),o=[p];function t(c,r,i,y,D,b){return a(),n("div",null,o)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
